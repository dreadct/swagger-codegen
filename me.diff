diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ObjcClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ObjcClientCodegen.java
index 4598113..f53e6c0 100644
--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ObjcClientCodegen.java
+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/ObjcClientCodegen.java
@@ -24,6 +24,7 @@ public class ObjcClientCodegen extends DefaultCodegen implements CodegenConfig {
     public static final String GIT_REPO_URL = "gitRepoURL";
     public static final String DEFAULT_LICENSE = "Proprietary";
     public static final String CORE_DATA = "coreData";
+    public static final String REACTIVE_OBJ_C = "reactiveObjC";
     
     protected Set<String> foundationClasses = new HashSet<String>();
     protected String podName = "SwaggerClient";
@@ -41,6 +42,7 @@ public class ObjcClientCodegen extends DefaultCodegen implements CodegenConfig {
     protected String apiFilesPath = "Api/";
 
     protected boolean generateCoreData = false;
+    protected boolean generateReactiveObjC = false;
     
     protected Set<String> advancedMapingTypes = new HashSet<String>();
 
@@ -212,6 +214,14 @@ public class ObjcClientCodegen extends DefaultCodegen implements CodegenConfig {
                 generateCoreData = true;
             }
         }
+
+        if (additionalProperties.containsKey(REACTIVE_OBJ_C)) {
+            Object reactiveObjC = additionalProperties.get(REACTIVE_OBJ_C);
+            if(((String)reactiveObjC).equalsIgnoreCase("true")) {
+                generateReactiveObjC = true;
+            }
+        }
+
         if (additionalProperties.containsKey(CLASS_PREFIX)) {
             setClassPrefix((String) additionalProperties.get(CLASS_PREFIX));
         }
@@ -247,6 +257,7 @@ public class ObjcClientCodegen extends DefaultCodegen implements CodegenConfig {
         additionalProperties.put("apiDocPath", apiDocPath);
         additionalProperties.put("modelDocPath", modelDocPath);
         additionalProperties.put("useCoreData", generateCoreData);
+        additionalProperties.put("useReactiveObjC", generateReactiveObjC);
 
         modelPackage = podName;
         apiPackage = podName;
diff --git a/modules/swagger-codegen/src/main/resources/objc/api-body.mustache b/modules/swagger-codegen/src/main/resources/objc/api-body.mustache
index c9afce2..4bbae22 100644
--- a/modules/swagger-codegen/src/main/resources/objc/api-body.mustache
+++ b/modules/swagger-codegen/src/main/resources/objc/api-body.mustache
@@ -1,4 +1,5 @@
-{{#operations}}
+{{#operations}}{{#useReactiveObjC}}
+#import <ReactiveObjC/ReactiveObjC.h>{{/useReactiveObjC}}
 #import "{{classname}}.h"
 #import "{{classPrefix}}QueryParamCollection.h"
 #import "{{classPrefix}}ApiClient.h"
@@ -51,6 +52,7 @@ NSInteger k{{classname}}MissingParamErrorCode = 234513;
 
 #pragma mark - Api Methods
 
+{{^useReactiveObjC}}
 {{#operation}}
 ///
 /// {{{summary}}}
@@ -156,6 +158,121 @@ NSInteger k{{classname}}MissingParamErrorCode = 234513;
 }
 
 {{/operation}}
+{{/useReactiveObjC}}
+{{#useReactiveObjC}}
+{{#operation}}
+///
+/// {{{summary}}}
+/// {{{notes}}}
+/// {{#allParams}} @param {{paramName}} {{{description}}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
+///
+/// {{/allParams}} @returns {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
+///
+- (RACSignal *){{#vendorExtensions.x-objc-operationId}}{{vendorExtensions.x-objc-operationId}}{{/vendorExtensions.x-objc-operationId}}{{^vendorExtensions.x-objc-operationId}}{{nickname}}{{#hasParams}}With{{vendorExtensions.firstParamAltName}}{{/hasParams}}{{^hasParams}}WithCompletionHandler:{{/hasParams}}{{/vendorExtensions.x-objc-operationId}}{{#allParams}}{{#secondaryParam}}
+    {{paramName}}{{/secondaryParam}}:({{{dataType}}}) {{paramName}}{{/allParams}}
+    {{#hasParams}}completionHandler:{{/hasParams}}(void (^)({{#returnBaseType}}{{{returnType}}} output, {{/returnBaseType}}NSError *error))handler {
+    {{#allParams}}
+    {{#required}}
+    // verify the required parameter '{{paramName}}' is set
+    if ({{paramName}} == nil) {
+        NSParameterAssert({{paramName}});
+        if(handler) {
+            NSDictionary * userInfo = @{NSLocalizedDescriptionKey :[NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"{{paramName}}"] };
+            NSError* error = [NSError errorWithDomain:k{{classname}}ErrorDomain code:k{{classname}}MissingParamErrorCode userInfo:userInfo];
+            handler({{#returnType}}nil, {{/returnType}}error);
+        }
+        return nil;
+    }
+
+    {{/required}}
+    {{/allParams}}
+    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"{{{path}}}"];
+
+    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
+    {{#pathParams}}
+    if ({{paramName}} != nil) {
+        pathParams[@"{{baseName}}"] = {{paramName}};
+    }
+    {{/pathParams}}
+
+    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
+    {{#queryParams}}
+    if ({{paramName}} != nil) {
+        {{#collectionFormat}}
+        queryParams[@"{{baseName}}"] = [[{{classPrefix}}QueryParamCollection alloc] initWithValuesAndFormat:{{paramName}} format:@"{{collectionFormat}}"];
+        {{/collectionFormat}}
+        {{^collectionFormat}}queryParams[@"{{baseName}}"] = {{paramName}};{{/collectionFormat}}
+    }
+    {{/queryParams}}
+    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
+    [headerParams addEntriesFromDictionary:self.defaultHeaders];
+    {{#headerParams}}
+    if ({{paramName}} != nil) {
+        headerParams[@"{{baseName}}"] = {{paramName}};
+    }
+    {{/headerParams}}
+    // HTTP header `Accept`
+    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[{{#produces}}@"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}]];
+    if(acceptHeader.length > 0) {
+        headerParams[@"Accept"] = acceptHeader;
+    }
+
+    // response content type
+    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?:@"";
+
+    // request content type
+    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[{{#consumes}}@"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}]];
+
+    // Authentication setting
+    NSArray *authSettings = @[{{#authMethods}}@"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}];
+
+    id bodyParam = nil;
+    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
+    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];
+    {{#bodyParam}}
+    bodyParam = {{paramName}};
+    {{/bodyParam}}
+    {{^bodyParam}}
+    {{#formParams}}
+    {{#notFile}}
+    if ({{paramName}}) {
+        formParams[@"{{baseName}}"] = {{paramName}};
+    }
+    {{/notFile}}
+    {{#isFile}}
+    localVarFiles[@"{{paramName}}"] = {{paramName}};
+    {{/isFile}}
+    {{/formParams}}
+    {{/bodyParam}}
+
+    RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(id<RACSubscriber> _Nonnull subscriber) {
+        NSURLSessionTask *task = [self.apiClient requestWithPath:resourcePath
+                                    method:@"{{httpMethod}}"
+                                pathParams:pathParams
+                               queryParams:queryParams
+                                formParams:formParams
+                                     files:localVarFiles
+                                      body:bodyParam
+                              headerParams:headerParams
+                              authSettings:authSettings
+                        requestContentType:requestContentType
+                       responseContentType:responseContentType
+                              responseType:{{^returnType}}nil{{/returnType}}{{#returnType}}@"{{{ returnType }}}"{{/returnType}}
+                           completionBlock:^(id data, NSError *error) {
+                                if(handler) {
+                                    handler({{#returnType}}({{{ returnType }}})data, {{/returnType}}error);
+                                }
+                            }];
+        RACDisposable *disposable = [RACDisposable disposableWithBlock:^{
+            [task cancel];
+        }];
+        return disposable;
+    }];
+    return signal;
+}
+
+{{/operation}}
+{{/useReactiveObjC}}
 
 {{newline}}
 {{/operations}}
